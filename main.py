import tkinter as tk
from tkinter import messagebox, Listbox, Scrollbar, SINGLE
import os
import psutil
import subprocess
import platform
import hashlib
 
 
# Define suspicious keywords or criteria
SUSPICIOUS_KEYWORDS = ['suspicious', 'unknown', 'malware', 'random', 'temp']
SUSPICIOUS_PATHS = ['temp', 'AppData', 'Local Settings']
 
 
# Example malware hashes (in a real application, use a comprehensive database)
MALWARE_HASHES = {'example_hash1', 'example_hash2'}
 
 
def get_file_hash(file_path):
   """Calculate the SHA-256 hash of a file."""
   sha256_hash = hashlib.sha256()
   try:
       with open(file_path, 'rb') as f:
           for byte_block in iter(lambda: f.read(4096), b""):
               sha256_hash.update(byte_block)
       return sha256_hash.hexdigest()
   except FileNotFoundError:
       return None
 
 
def get_startup_items():
   startup_items = []
   if platform.system() == 'Windows':
       import winreg
       registry_paths = [
           r"Software\Microsoft\Windows\CurrentVersion\Run",
           r"Software\Microsoft\Windows\CurrentVersion\RunOnce",
       ]
       for path in registry_paths:
           try:
               with winreg.OpenKey(winreg.HKEY_CURRENT_USER, path, 0, winreg.KEY_READ) as key:
                   i = 0
                   while True:
                       try:
                           name, value, _ = winreg.EnumValue(key, i)
                           startup_items.append((name, value))
                           i += 1
                       except OSError:
                           break
           except FileNotFoundError:
               continue
   elif platform.system() == 'Linux':
       # Check common startup directories
       startup_dirs = [
           os.path.expanduser('~/.config/autostart'),
           '/etc/xdg/autostart'
       ]
       for dir in startup_dirs:
           if os.path.exists(dir):
               for item in os.listdir(dir):
                   startup_items.append((item, os.path.join(dir, item)))
   return startup_items
 
 
def get_scheduled_tasks():
   tasks = []
   if platform.system() == 'Windows':
       try:
           result = subprocess.run(['schtasks', '/query', '/fo', 'csv', '/nh'], capture_output=True, text=True)
           tasks = result.stdout.splitlines()
       except Exception as e:
           messagebox.showerror("Error", f"Failed to get scheduled tasks: {e}")
   elif platform.system() == 'Linux':
       try:
           result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
           tasks = result.stdout.splitlines()
       except Exception as e:
           messagebox.showerror("Error", f"Failed to get crontab entries: {e}")
   return tasks
 
 
def scan_processes():
   suspicious_processes = []
   for proc in psutil.process_iter(attrs=['pid', 'name', 'exe', 'username']):
       try:
           exe_path = proc.info['exe']
           if not exe_path or not os.path.exists(exe_path):
               suspicious_processes.append(proc.info)
               continue
 
 
           # Check for suspicious keywords in the executable path
           if any(keyword in exe_path.lower() for keyword in SUSPICIOUS_KEYWORDS + SUSPICIOUS_PATHS):
               suspicious_processes.append(proc.info)
               continue
 
 
           # Check the file hash
           file_hash = get_file_hash(exe_path)
           if file_hash in MALWARE_HASHES:
               suspicious_processes.append(proc.info)
               continue
 
 
           # (Optional) Check digital signature - omitted for simplicity
 
 
       except (psutil.NoSuchProcess, psutil.AccessDenied):
           continue
   return suspicious_processes
 
 
def remove_startup_item(name, path):
   if platform.system() == 'Windows':
       import winreg
       try:
           with winreg.OpenKey(winreg.HKEY_CURRENT_USER, path, 0, winreg.KEY_SET_VALUE) as key:
               winreg.DeleteValue(key, name)
               messagebox.showinfo("Info", f"Removed startup item: {name}")
       except FileNotFoundError:
           messagebox.showwarning("Warning", f"Startup item {name} not found.")
       except OSError as e:
           messagebox.showerror("Error", f"Failed to remove startup item {name}: {e}")
   elif platform.system() == 'Linux':
       try:
           os.remove(os.path.join(os.path.expanduser('~/.config/autostart'), name))
           messagebox.showinfo("Info", f"Removed startup item: {name}")
       except FileNotFoundError:
           messagebox.showwarning("Warning", f"Startup item {name} not found.")
       except OSError as e:
           messagebox.showerror("Error", f"Failed to remove startup item {name}: {e}")
 
 
def remove_scheduled_task(task):
   if platform.system() == 'Windows':
       try:
           task_name = task.split(",")[0].strip('"')
           subprocess.run(['schtasks', '/delete', '/tn', task_name, '/f'])
           messagebox.showinfo("Info", f"Removed scheduled task: {task_name}")
       except Exception as e:
           messagebox.showerror("Error", f"Failed to remove scheduled task: {e}")
   elif platform.system() == 'Linux':
       try:
           cron_lines = subprocess.run(['crontab', '-l'], capture_output=True, text=True).stdout.splitlines()
           cron_lines.remove(task)
           new_cron = "\n".join(cron_lines)
           subprocess.run(['crontab', '-'], input=new_cron, text=True)
           messagebox.showinfo("Info", f"Removed scheduled task: {task}")
       except ValueError:
           messagebox.showwarning("Warning", "Scheduled task not found.")
       except Exception as e:
           messagebox.showerror("Error", f"Failed to remove scheduled task: {e}")
 
 
def remove_selected_item(listbox, items, path=None):
   selected_idx = listbox.curselection()
   if selected_idx:
       selected_idx = selected_idx[0]
       item = items[selected_idx]
       if path:
           remove_startup_item(item[0], path)
       elif isinstance(item, dict):
           try:
               psutil.Process(item['pid']).terminate()
               messagebox.showinfo("Info", f"Terminated process: {item['pid']} ({item['name']})")
           except psutil.NoSuchProcess:
               messagebox.showwarning("Warning", f"Process {item['pid']} no longer exists.")
           except psutil.AccessDenied:
               messagebox.showerror("Error", f"Access denied to terminate process {item['pid']}.")
       else:
           remove_scheduled_task(item)
       listbox.delete(selected_idx)
   else:
       messagebox.showwarning("Warning", "No item selected.")
 
 
def display_startup_items():
   items = get_startup_items()
   suspicious_items = [item for item in items if any(keyword in item[1].lower() for keyword in SUSPICIOUS_KEYWORDS)]
   display_items(suspicious_items, "Startup Items", remove_startup_item, r"Software\Microsoft\Windows\CurrentVersion\Run" if platform.system() == 'Windows' else None)
 
 
def display_scheduled_tasks():
   items = get_scheduled_tasks()
   suspicious_items = [item for item in items if any(keyword in item.lower() for keyword in SUSPICIOUS_KEYWORDS)]
   display_items(suspicious_items, "Scheduled Tasks", remove_scheduled_task)
 
 
def display_running_processes():
   items = scan_processes()
   suspicious_items = [item for item in items if any(keyword in item['name'].lower() for keyword in SUSPICIOUS_KEYWORDS)]
   display_items(suspicious_items, "Running Processes", remove_selected_item)
 
 
def display_items(items, title, remove_func=None, path=None):
   top = tk.Toplevel(root)
   top.title(title)
 
 
   scrollbar = Scrollbar(top)
   scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
 
 
   listbox = Listbox(top, selectmode=SINGLE, yscrollcommand=scrollbar.set)
   for item in items:
       listbox.insert(tk.END, item)
   listbox.pack(fill=tk.BOTH, expand=True)
 
 
   scrollbar.config(command=listbox.yview)
 
 
   if remove_func:
       remove_button = tk.Button(top, text="Remove Selected", command=lambda: remove_selected_item(listbox, items, path))
       remove_button.pack(pady=10)
 
 
def create_gui():
   global root
   root = tk.Tk()
   root.title("Malware Detection and Removal - The Pycodes")
   root.geometry("400x300")
 
 
   label = tk.Label(root, text="Malware Detection and Removal Tool", font=("Arial", 14))
   label.pack(pady=10)
 
 
   scan_startup_button = tk.Button(root, text="Scan Startup Items", command=display_startup_items, width=25)
   scan_startup_button.pack(pady=5)
 
 
   scan_tasks_button = tk.Button(root, text="Scan Scheduled Tasks", command=display_scheduled_tasks, width=25)
   scan_tasks_button.pack(pady=5)
 
 
   scan_processes_button = tk.Button(root, text="Scan Running Processes", command=display_running_processes, width=25)
   scan_processes_button.pack(pady=5)
 
 
   exit_button = tk.Button(root, text="Exit", command=root.quit, width=25)
   exit_button.pack(pady=5)
 
 
   root.mainloop()
 
 
if __name__ == "__main__":
   create_gui()
